--start20
--savegame
-- LocalScript in StarterPlayerScripts

local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Function to save the game
local function saveGame()
    if saveinstance then
        print("Saving game might depend on the executor you're using")
        saveinstance() -- This function may require a compatible executor
    else
        print("saveinstance() function is not available in your executor.")
    end
end

-- Function to handle chat commands
local function onChatted(message)
    local args = message:split(" ")
    local command = args[1]:lower()

    if command == ";savegame" then
        saveGame()
    end
end

-- Connect chat listener
player.Chatted:Connect(onChatted)

--start21
--searchobject
-- LocalScript in StarterPlayerScripts

local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")

-- UI elements
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "ESPMenu"
screenGui.Parent = Player:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 300, 0, 150)
frame.Position = UDim2.new(0, 50, 0, 50)
frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
frame.Visible = false
frame.Parent = screenGui
frame.Draggable = true

local inputBox = Instance.new("TextBox")
inputBox.Size = UDim2.new(0, 200, 0, 50)
inputBox.Position = UDim2.new(0, 10, 0, 10)
inputBox.PlaceholderText = "Enter partial name..."
inputBox.TextColor3 = Color3.fromRGB(255, 255, 255)
inputBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
inputBox.Parent = frame

local searchButton = Instance.new("TextButton")
searchButton.Size = UDim2.new(0, 80, 0, 50)
searchButton.Position = UDim2.new(0, 220, 0, 10)
searchButton.Text = "Search"
searchButton.TextColor3 = Color3.fromRGB(255, 255, 255)
searchButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
searchButton.Parent = frame

local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 80, 0, 50)
closeButton.Position = UDim2.new(0, 10, 0, 70)
closeButton.Text = "Close"
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
closeButton.Parent = frame

local clearButton = Instance.new("TextButton")
clearButton.Size = UDim2.new(0, 80, 0, 50)
clearButton.Position = UDim2.new(0, 220, 0, 70)
clearButton.Text = "Clear ESP"
clearButton.TextColor3 = Color3.fromRGB(255, 255, 255)
clearButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
clearButton.Parent = frame

local espEnabled = false

-- Function to create ESP
local function createESP(part)
    local esp = Instance.new("BillboardGui")
    esp.Adornee = part
    esp.Name = "ESP"
    esp.Size = UDim2.new(0, 200, 0, 50)
    esp.StudsOffset = Vector3.new(0, 2, 0)
    esp.AlwaysOnTop = true
    esp.MaxDistance = 1000
    esp.Parent = part

    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.TextColor3 = Color3.fromRGB(255, 0, 0)
    textLabel.TextStrokeTransparency = 0.5
    textLabel.Text = part.Name
    textLabel.Parent = esp
end

-- Function to update ESP based on the search term
local function updateESP(searchTerm)
    for _, part in pairs(Workspace:GetDescendants()) do
        if part:IsA("BasePart") and string.find(part.Name:lower(), searchTerm:lower()) then
            if not part:FindFirstChild("ESP") then
                createESP(part)
            end
        end
    end
end

-- Function to clear ESP
local function clearESP()
    for _, part in pairs(Workspace:GetDescendants()) do
        if part:IsA("BasePart") and part:FindFirstChild("ESP") then
            part:FindFirstChild("ESP"):Destroy()
        end
    end
end

-- Handle chat commands
local function onChatted(message)
    local args = message:split(" ")
    local command = args[1]:lower()

    if command == ";searchobject" then
        frame.Visible = not frame.Visible
    elseif command == ";object" and args[2]:lower() == "esp" then
        if args[3]:lower() == "on" then
            espEnabled = true
        elseif args[3]:lower() == "off" then
            espEnabled = false
            clearESP()
        end
    end
end

-- Button handlers
searchButton.MouseButton1Click:Connect(function()
    local searchTerm = inputBox.Text
    if searchTerm and searchTerm ~= "" then
        updateESP(searchTerm)
    end
end)

closeButton.MouseButton1Click:Connect(function()
    frame.Visible = false
end)

clearButton.MouseButton1Click:Connect(function()
    clearESP()
end)

-- Connect chat listener
Player.Chatted:Connect(onChatted)

-- Ensure the UI persists after player reset
Player.CharacterAdded:Connect(function()
    wait(1) -- Wait for the character to fully load
    if not Player.PlayerGui:FindFirstChild("ESPMenu") then
        screenGui = Instance.new("ScreenGui")
        screenGui.Name = "ESPMenu"
        screenGui.Parent = Player:WaitForChild("PlayerGui")

        frame = Instance.new("Frame")
        frame.Size = UDim2.new(0, 300, 0, 150)
        frame.Position = UDim2.new(0, 50, 0, 50)
        frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
        frame.Visible = false
        frame.Parent = screenGui
        frame.Draggable = true

        inputBox = Instance.new("TextBox")
        inputBox.Size = UDim2.new(0, 200, 0, 50)
        inputBox.Position = UDim2.new(0, 10, 0, 10)
        inputBox.PlaceholderText = "Enter partial name..."
        inputBox.TextColor3 = Color3.fromRGB(255, 255, 255)
        inputBox.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        inputBox.Parent = frame

        searchButton = Instance.new("TextButton")
        searchButton.Size = UDim2.new(0, 80, 0, 50)
        searchButton.Position = UDim2.new(0, 220, 0, 10)
        searchButton.Text = "Search"
        searchButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        searchButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        searchButton.Parent = frame

        closeButton = Instance.new("TextButton")
        closeButton.Size = UDim2.new(0, 80, 0, 50)
        closeButton.Position = UDim2.new(0, 10, 0, 70)
        closeButton.Text = "Close"
        closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        closeButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        closeButton.Parent = frame

        clearButton = Instance.new("TextButton")
        clearButton.Size = UDim2.new(0, 80, 0, 50)
        clearButton.Position = UDim2.new(0, 220, 0, 70)
        clearButton.Text = "Clear ESP"
        clearButton.TextColor3 = Color3.fromRGB(255, 255, 255)
        clearButton.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
        clearButton.Parent = frame
    end
end)

--start22
--setptpp
-- LocalScript in StarterPlayerScripts

local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local TeleportPoint = nil  -- Variable to store the teleportation point

-- Function to set the teleportation point
local function setTeleportPoint()
    if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
        TeleportPoint = Player.Character.HumanoidRootPart.Position
        print("Teleportation point set.")
    else
        print("Character not loaded yet.")
    end
end

-- Function to teleport to the set point
local function teleportToPoint()
    if TeleportPoint then
        if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
            Player.Character.HumanoidRootPart.CFrame = CFrame.new(TeleportPoint)
            print("Teleported to the set point.")
        else
            print("Character not loaded yet.")
        end
    else
        print("Teleportation point not set.")
    end
end

-- Handle chat commands
local function onChatted(message)
    local args = message:split(" ")
    local command = args[1]:lower()

    if command == ";setp" then
        setTeleportPoint()
    elseif command == ";tpp" then
        teleportToPoint()
    end
end

-- Connect chat listener
Player.Chatted:Connect(onChatted)

-- Ensure teleportation point persists after player reset
Player.CharacterAdded:Connect(function()
    wait(1) -- Wait for the character to fully load
    if TeleportPoint then
        -- Ensure the character is moved to the teleportation point if it was set
        if Player.Character and Player.Character:FindFirstChild("HumanoidRootPart") then
            Player.Character.HumanoidRootPart.CFrame = CFrame.new(TeleportPoint)
        end
    end
end)

--start 23
-- Services
local Players = game:GetService("Players")
local Lighting = game:GetService("Lighting")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Variables
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")
local mapGui = nil
local screenShakeEnabled = false
local screenShakeIntensity = 0

-- Utility function to parse color names
local function getColorFromName(colorName)
    local color = Color3.fromRGB(255, 255, 255)  -- Default to white
    if colorName == "red" then
        color = Color3.fromRGB(255, 0, 0)
    elseif colorName == "green" then
        color = Color3.fromRGB(0, 255, 0)
    elseif colorName == "blue" then
        color = Color3.fromRGB(0, 0, 255)
    elseif colorName == "yellow" then
        color = Color3.fromRGB(255, 255, 0)
    elseif colorName == "cyan" then
        color = Color3.fromRGB(0, 255, 255)
    elseif colorName == "magenta" then
        color = Color3.fromRGB(255, 0, 255)
    end
    return color
end

-- Function to create map UI
local function createMapUI()
    if mapGui then
        mapGui:Destroy()
    end

    mapGui = Instance.new("ScreenGui")
    mapGui.Name = "MapGUI"
    mapGui.ResetOnSpawn = false
    mapGui.Parent = playerGui

    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(0.3, 0, 0.3, 0)
    frame.Position = UDim2.new(0.7, 0, 0.7, 0)
    frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    frame.BackgroundTransparency = 0.5
    frame.Parent = mapGui

    local closeButton = Instance.new("TextButton")
    closeButton.Size = UDim2.new(0.1, 0, 0.1, 0)
    closeButton.Position = UDim2.new(0.9, 0, 0, 0)
    closeButton.Text = "Close"
    closeButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
    closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
    closeButton.Parent = frame

    closeButton.MouseButton1Click:Connect(function()
        if mapGui then
            mapGui:Destroy()
        end
    end)
end

-- Command handlers
local function onChatted(message)
    local args = message:split(" ")
    local command = args[1]:lower()

    if command == ";shoansjjwmap" then
        createMapUI()
    elseif command == ";raiuksjsn" then
        Lighting.Rain.Enabled = true
        Lighting.Snow.Enabled = false
    elseif command == ";ssshhsnow" then
        Lighting.Rain.Enabled = false
        Lighting.Snow.Enabled = true
    elseif command == ";clbsbsear" then
        Lighting.Rain.Enabled = false
        Lighting.Snow.Enabled = false
    elseif command == ";fog" and args[2] then
        local density = tonumber(args[2])
        if density then
            Lighting.FogEnd = density
        end
    elseif command == ";fogcolor" and args[2] then
        local colorName = args[2]:lower()
        local color = getColorFromName(colorName)
        Lighting.FogColor = color
    elseif command == ";error91727" and args[2] then
        local colorName = args[2]:lower()
        local color = getColorFromName(colorName)
        Lighting.ColorCorrection.TintColor = color
    elseif command == ";fogclear" then
        Lighting.FogEnd = math.huge
        Lighting.FogColor = Color3.fromRGB(255, 255, 255)
    elseif command == ";shake" and args[2] then
        screenShakeIntensity = tonumber(args[2]) or 0
        screenShakeEnabled = screenShakeIntensity > 0
    elseif command == ";stopshake" then
        screenShakeEnabled = false
    end
end

-- Handle screen shake
RunService.RenderStepped:Connect(function(deltaTime)
    if screenShakeEnabled then
        local offset = Vector3.new(
            math.random() * screenShakeIntensity - screenShakeIntensity / 2,
            math.random() * screenShakeIntensity - screenShakeIntensity / 2,
            0
        )
        if player.Character and player.Character.PrimaryPart then
            player.Character:SetPrimaryPartCFrame(player.Character.PrimaryPart.CFrame * CFrame.new(offset))
        end
    end
end)

-- Connect chat listener
player.Chatted:Connect(onChatted)

--start24
--speed,jump,health
-- LocalScript in StarterPlayerScripts

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local player = Players.LocalPlayer
local character = player.Character
local humanoid = character and character:FindFirstChildOfClass("Humanoid")
local commandPrefix = ";"

-- Function to handle chat commands
local function onChatted(message)
    local args = message:split(" ")
    local command = args[1]:lower()
    
    if command == commandPrefix .. "jump" and tonumber(args[2]) then
        local jumpPower = tonumber(args[2])
        if humanoid then
            humanoid.JumpPower = jumpPower
        end
    elseif command == commandPrefix .. "speed" and tonumber(args[2]) then
        local walkSpeed = tonumber(args[2])
        if humanoid then
            humanoid.WalkSpeed = walkSpeed
        end
    elseif command == commandPrefix .. "health" and tonumber(args[2]) then
        local health = tonumber(args[2])
        if humanoid then
            humanoid.Health = health
        end
    elseif command == commandPrefix .. "resetstats" then
        if humanoid then
            humanoid.JumpPower = 50
            humanoid.WalkSpeed = 16
            humanoid.Health = 100
        end
    elseif command == commandPrefix .. "fill" and args[2] and args[3] and args[4] then
        local x, y, z = tonumber(args[2]), tonumber(args[3]), tonumber(args[4])
        local fillType = args[5]:lower()
        if fillType == "water" then
            local waterPart = Instance.new("Part")
            waterPart.Size = Vector3.new(10, 10, 10)
            waterPart.Position = Vector3.new(x, y, z)
            waterPart.Anchored = true
            waterPart.CanCollide = false
            waterPart.BrickColor = BrickColor.new("Bright blue")
            waterPart.Material = Enum.Material.Water
            waterPart.Parent = Workspace
        elseif fillType == "platform" then
            local platformPart = Instance.new("Part")
            platformPart.Size = Vector3.new(10, 1, 10)
            platformPart.Position = Vector3.new(x, y, z)
            platformPart.Anchored = true
            platformPart.CanCollide = true
            platformPart.BrickColor = BrickColor.new("Bright green")
            platformPart.Material = Enum.Material.SmoothPlastic
            platformPart.Parent = Workspace
        end
    end
end

-- Connect chat listener
player.Chatted:Connect(onChatted)

--start25
--swim
-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Variables
local player = Players.LocalPlayer
local swimming = false
local oldgrav
local gravReset
local swimbeat

-- Function to start swimming
local function startSwimming()
    if not swimming and player and player.Character and player.Character:FindFirstChildWhichIsA("Humanoid") then
        oldgrav = Workspace.Gravity
        Workspace.Gravity = 0

        local swimDied = function()
            Workspace.Gravity = oldgrav
            swimming = false
        end

        local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
        gravReset = humanoid.Died:Connect(swimDied)

        local enums = Enum.HumanoidStateType:GetEnumItems()
        table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
        for _, state in pairs(enums) do
            humanoid:SetStateEnabled(state, false)
        end

        humanoid:ChangeState(Enum.HumanoidStateType.Swimming)

        swimbeat = RunService.Heartbeat:Connect(function()
            pcall(function()
                player.Character.HumanoidRootPart.Velocity = 
                    ((humanoid.MoveDirection ~= Vector3.new() or UserInputService:IsKeyDown(Enum.KeyCode.Space))
                    and player.Character.HumanoidRootPart.Velocity or Vector3.new())
            end)
        end)

        swimming = true
    end
end

-- Function to stop swimming
local function stopSwimming()
    if player and player.Character and player.Character:FindFirstChildWhichIsA("Humanoid") then
        Workspace.Gravity = oldgrav
        swimming = false

        if gravReset then
            gravReset:Disconnect()
        end

        if swimbeat then
            swimbeat:Disconnect()
            swimbeat = nil
        end

        local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
        local enums = Enum.HumanoidStateType:GetEnumItems()
        table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
        for _, state in pairs(enums) do
            humanoid:SetStateEnabled(state, true)
        end
    end
end

-- Handle chat commands
local function onChatted(message)
    local args = message:split(" ")
    local command = args[1]:lower()

    if command == ";swim" then
        startSwimming()
    elseif command == ";unswim" then
        stopSwimming()
    end
end

-- Connect chat listener
player.Chatted:Connect(onChatted)

--start26
--xray,coordinates
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local screenGui
local coordinatesLabel
local xrayEnabled = false
local originalTransparency = {}
local xrayObjects = {}

-- Function to create or get the coordinates display
local function getOrCreateCoordinatesDisplay()
    local gui = player:FindFirstChild("PlayerGui"):FindFirstChild("CoordinatesGUI")
    if not gui then
        gui = Instance.new("ScreenGui")
        gui.Name = "CoordinatesGUI"
        gui.ResetOnSpawn = false
        gui.Parent = player:WaitForChild("PlayerGui")

        -- Create coordinates label
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(0.2, 0, 0.1, 0)
        label.Position = UDim2.new(0, 10, 0, 10)
        label.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        label.BackgroundTransparency = 0.5
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.TextScaled = true
        label.Text = "Coordinates: N/A"
        label.Parent = gui
        coordinatesLabel = label
    end
    return gui
end

-- Function to update the coordinates label
local function updateCoordinates()
    if coordinatesLabel then
        local position = player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart.Position
        if position then
            coordinatesLabel.Text = string.format("Coordinates: X: %.2f Y: %.2f Z: %.2f", position.X, position.Y, position.Z)
        end
    end
end

-- Function to apply x-ray effect
local function applyXRayEffect(enable)
    if enable then
        -- Apply x-ray effect
        for _, obj in pairs(workspace:GetDescendants()) do
            if obj:IsA("BasePart") then
                if not originalTransparency[obj] then
                    originalTransparency[obj] = obj.Transparency
                end
                obj.Transparency = 0.8
            end
        end
    else
        -- Remove x-ray effect
        for obj, transparency in pairs(originalTransparency) do
            if obj and obj:IsA("BasePart") then
                obj.Transparency = transparency
            end
        end
        originalTransparency = {}
    end
end

-- Function to handle commands
local function onChatted(message)
    message = message:lower()
    if message == ";coordinates" then
        getOrCreateCoordinatesDisplay()
        RunService.RenderStepped:Connect(updateCoordinates)
    elseif message == ";offcoordinates" then
        local gui = player:FindFirstChild("PlayerGui"):FindFirstChild("CoordinatesGUI")
        if gui then
            gui:Destroy()
            coordinatesLabel = nil
        end
    elseif message == ";xray on" then
        applyXRayEffect(true)
    elseif message == ";xray off" then
        applyXRayEffect(false)
    end
end

-- Connect the chat function to the player's Chatted event
player.Chatted:Connect(onChatted)
