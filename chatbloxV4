--start24
--speed,jump,health
-- LocalScript in StarterPlayerScripts

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local player = Players.LocalPlayer
local character = player.Character
local humanoid = character and character:FindFirstChildOfClass("Humanoid")
local commandPrefix = ";"

-- Function to handle chat commands
local function onChatted(message)
    local args = message:split(" ")
    local command = args[1]:lower()
    
    if command == commandPrefix .. "jump" and tonumber(args[2]) then
        local jumpPower = tonumber(args[2])
        if humanoid then
            humanoid.JumpPower = jumpPower
        end
    elseif command == commandPrefix .. "speed" and tonumber(args[2]) then
        local walkSpeed = tonumber(args[2])
        if humanoid then
            humanoid.WalkSpeed = walkSpeed
        end
    elseif command == commandPrefix .. "health" and tonumber(args[2]) then
        local health = tonumber(args[2])
        if humanoid then
            humanoid.Health = health
        end
    elseif command == commandPrefix .. "resetstats" then
        if humanoid then
            humanoid.JumpPower = 50
            humanoid.WalkSpeed = 16
            humanoid.Health = 100
        end
    elseif command == commandPrefix .. "fill" and args[2] and args[3] and args[4] then
        local x, y, z = tonumber(args[2]), tonumber(args[3]), tonumber(args[4])
        local fillType = args[5]:lower()
        if fillType == "water" then
            local waterPart = Instance.new("Part")
            waterPart.Size = Vector3.new(10, 10, 10)
            waterPart.Position = Vector3.new(x, y, z)
            waterPart.Anchored = true
            waterPart.CanCollide = false
            waterPart.BrickColor = BrickColor.new("Bright blue")
            waterPart.Material = Enum.Material.Water
            waterPart.Parent = Workspace
        elseif fillType == "platform" then
            local platformPart = Instance.new("Part")
            platformPart.Size = Vector3.new(10, 1, 10)
            platformPart.Position = Vector3.new(x, y, z)
            platformPart.Anchored = true
            platformPart.CanCollide = true
            platformPart.BrickColor = BrickColor.new("Bright green")
            platformPart.Material = Enum.Material.SmoothPlastic
            platformPart.Parent = Workspace
        end
    end
end

-- Connect chat listener
player.Chatted:Connect(onChatted)

--start25
--swim
-- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Variables
local player = Players.LocalPlayer
local swimming = false
local oldgrav
local gravReset
local swimbeat

-- Function to start swimming
local function startSwimming()
    if not swimming and player and player.Character and player.Character:FindFirstChildWhichIsA("Humanoid") then
        oldgrav = Workspace.Gravity
        Workspace.Gravity = 0

        local swimDied = function()
            Workspace.Gravity = oldgrav
            swimming = false
        end

        local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
        gravReset = humanoid.Died:Connect(swimDied)

        local enums = Enum.HumanoidStateType:GetEnumItems()
        table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
        for _, state in pairs(enums) do
            humanoid:SetStateEnabled(state, false)
        end

        humanoid:ChangeState(Enum.HumanoidStateType.Swimming)

        swimbeat = RunService.Heartbeat:Connect(function()
            pcall(function()
                player.Character.HumanoidRootPart.Velocity = 
                    ((humanoid.MoveDirection ~= Vector3.new() or UserInputService:IsKeyDown(Enum.KeyCode.Space))
                    and player.Character.HumanoidRootPart.Velocity or Vector3.new())
            end)
        end)

        swimming = true
    end
end

-- Function to stop swimming
local function stopSwimming()
    if player and player.Character and player.Character:FindFirstChildWhichIsA("Humanoid") then
        Workspace.Gravity = oldgrav
        swimming = false

        if gravReset then
            gravReset:Disconnect()
        end

        if swimbeat then
            swimbeat:Disconnect()
            swimbeat = nil
        end

        local humanoid = player.Character:FindFirstChildWhichIsA("Humanoid")
        local enums = Enum.HumanoidStateType:GetEnumItems()
        table.remove(enums, table.find(enums, Enum.HumanoidStateType.None))
        for _, state in pairs(enums) do
            humanoid:SetStateEnabled(state, true)
        end
    end
end

-- Handle chat commands
local function onChatted(message)
    local args = message:split(" ")
    local command = args[1]:lower()

    if command == ";swim" then
        startSwimming()
    elseif command == ";unswim" then
        stopSwimming()
    end
end

-- Connect chat listener
player.Chatted:Connect(onChatted)

--start26
--xray,coordinates
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer
local screenGui
local coordinatesLabel
local xrayEnabled = false
local originalTransparency = {}
local xrayObjects = {}

-- Function to create or get the coordinates display
local function getOrCreateCoordinatesDisplay()
    local gui = player:FindFirstChild("PlayerGui"):FindFirstChild("CoordinatesGUI")
    if not gui then
        gui = Instance.new("ScreenGui")
        gui.Name = "CoordinatesGUI"
        gui.ResetOnSpawn = false
        gui.Parent = player:WaitForChild("PlayerGui")

        -- Create coordinates label
        local label = Instance.new("TextLabel")
        label.Size = UDim2.new(0.2, 0, 0.1, 0)
        label.Position = UDim2.new(0, 10, 0, 10)
        label.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
        label.BackgroundTransparency = 0.5
        label.TextColor3 = Color3.fromRGB(255, 255, 255)
        label.TextScaled = true
        label.Text = "Coordinates: N/A"
        label.Parent = gui
        coordinatesLabel = label
    end
    return gui
end

-- Function to update the coordinates label
local function updateCoordinates()
    if coordinatesLabel then
        local position = player.Character and player.Character:FindFirstChild("HumanoidRootPart") and player.Character.HumanoidRootPart.Position
        if position then
            coordinatesLabel.Text = string.format("Coordinates: X: %.2f Y: %.2f Z: %.2f", position.X, position.Y, position.Z)
        end
    end
end

-- Function to apply x-ray effect
local function applyXRayEffect(enable)
    if enable then
        -- Apply x-ray effect
        for _, obj in pairs(workspace:GetDescendants()) do
            if obj:IsA("BasePart") then
                if not originalTransparency[obj] then
                    originalTransparency[obj] = obj.Transparency
                end
                obj.Transparency = 0.8
            end
        end
    else
        -- Remove x-ray effect
        for obj, transparency in pairs(originalTransparency) do
            if obj and obj:IsA("BasePart") then
                obj.Transparency = transparency
            end
        end
        originalTransparency = {}
    end
end

-- Function to handle commands
local function onChatted(message)
    message = message:lower()
    if message == ";coordinates" then
        getOrCreateCoordinatesDisplay()
        RunService.RenderStepped:Connect(updateCoordinates)
    elseif message == ";offcoordinates" then
        local gui = player:FindFirstChild("PlayerGui"):FindFirstChild("CoordinatesGUI")
        if gui then
            gui:Destroy()
            coordinatesLabel = nil
        end
    elseif message == ";xray on" then
        applyXRayEffect(true)
    elseif message == ";xray off" then
        applyXRayEffect(false)
    end
end

-- Connect the chat function to the player's Chatted event
player.Chatted:Connect(onChatted)

--start24
-- Spin Command Script

local spinSpeed = 0
local spinning = false

local function startSpinning(speed)
    spinSpeed = speed
    spinning = true
    while spinning do
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.Angles(0, math.rad(spinSpeed), 0)
        wait(0.1)
    end
end

local function stopSpinning()
    spinning = false
end

game.Players.LocalPlayer.Chatted:Connect(function(msg)
    local args = string.split(msg, " ")
    if args[1] == ";spin" and args[2] then
        local speed = tonumber(args[2])
        if speed then
            startSpinning(speed)
        end
    elseif args[1] == ";unspin" then
        stopSpinning()
    end
end)

--start27
--reset,hop,kickself,rejoin
local player = game.Players.LocalPlayer
local teleportService = game:GetService("TeleportService")
local placeId = game.PlaceId  -- The placeId of the current game

-- Function to reset the player's character
local function resetCharacter()
    if player.Character then
        player.Character:BreakJoints()
    end
end

-- Function to rejoin the same server
local function rejoinServer()
    teleportService:TeleportToPlaceInstance(placeId, game.JobId, player)
end

-- Function to hop to a different server
local function serverHop()
    -- Here, you might want to specify how you get a list of servers. This is a generic approach.
    -- Redirecting to the main place with a new server.
    teleportService:Teleport(placeId, player)
end

-- Function to kick the player from the server
local function kickSelf()
    player:Kick("You kicked yourself from the server.")
end

-- Listen for chat commands
player.Chatted:Connect(function(message)
    local command = message:lower()

    if command == ";reset" then
        resetCharacter()
    elseif command == ";rejoin" then
        rejoinServer()
    elseif command == ";hop" then
        serverHop()
    elseif command == ";kickself" then
        kickSelf()
    end
end)
